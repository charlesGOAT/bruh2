@using Microsoft.AspNetCore.Identity
@using System.Security.Claims;
@inject SignInManager<IdentityUser> SignInManager
@inject UserManager<IdentityUser> UserManager
@inject CurrentSession _context
@{
    string role;
    var claims = (ClaimsIdentity)User.Identity;
    try {
        role = claims.FindFirst(ClaimTypes.Role).Value;
    } catch{
        role = null;
    }
}

<ul class="navbar-nav">
@if (SignInManager.IsSignedIn(User))
{
        @if (role != null && role != "Customer")
        {
            <li class="nav-item">
                <a asp-controller="Products" asp-action="Index">Products</a>
            </li>
            <li class="nav-item">
                <a asp-controller="ProductCategories" asp-action="Index">Categories</a>
            </li>
            <li class="nav-item">
                <a id="GetAll" asp-controller="Accounts" asp-action="Index">View all accounts</a>
            </li>
            <li class="nav-item">
                <a id="register" asp-area="Identity" asp-page="/Account/Register">Create Account</a>
            </li>
          
        }
        else {
            <li class="nav-item">
                <a href="http://localhost:54487">Go to customer side</a>
            </li>
        }

    <li class="nav-item">
        <a id="manage" asp-controller= "Accounts"asp-action="Update" asp-route-id="@SignInManager.UserManager.GetUserId(User)" title="Manage">Edit Account</a>
    </li>
      
   

        <li class="nav-item">
        <form id="logoutForm"  asp-area="Identity" asp-page="/Account/Logout" asp-route-returnUrl="@Url.Action("Index", "Home", new { area = "" })">
            <button id="logout" type="submit" class="btn-link" >Logout</button>
        </form>
    </li>
}
else
{
    <li class="nav-item">
        <a id="register" asp-area="Identity" asp-page="/Account/Register">Register</a>
    </li>
    <li class="nav-item">
        <a id="login" asp-area="Identity" asp-page="/Account/Login">Login</a>
    </li>
}
</ul>
